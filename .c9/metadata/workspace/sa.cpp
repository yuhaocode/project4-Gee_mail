{"filter":false,"title":"sa.cpp","tooltip":"/sa.cpp","undoManager":{"mark":11,"position":11,"stack":[[{"start":{"row":0,"column":0},"end":{"row":66,"column":0},"action":"remove","lines":["#include \"salsa.h\"","using CryptoPP::Salsa20;","","#include \"osrng.h\"","using CryptoPP::AutoSeededRandomPool;","","#include <iostream>","using std::cout;","using std::endl;","","using std::string;","","int main() {","","\tAutoSeededRandomPool prng;","","\tstring ciphertextStr(\"\"), plaintextStr(\"My Plaintext!! My Dear plaintext!!\");","\tbyte *plaintextBytes = (byte *) plaintextStr.c_str();","\t//I could statically allocate this, but then changes will require work, and typing","\tbyte *ciphertextBytes = new byte[plaintextStr.length()];","","\t//~Key and IV Generation/Initialization======================================","\t/////////////////////////////////////////////////////////////////////////////","\t/////////////////////////////////////////////////////////////////////////////","\tbyte key[32];","\tbyte iv[8];","\tprng.GenerateBlock(key, 32);","\tprng.GenerateBlock(iv, 8);","","\t//~Encryption================================================================","\t/////////////////////////////////////////////////////////////////////////////","\t/////////////////////////////////////////////////////////////////////////////","\tSalsa20::Encryption salsa;\t","\tsalsa.SetKeyWithIV(key, 32, iv);","\tsalsa.ProcessData(ciphertextBytes, plaintextBytes, plaintextStr.length());","\tciphertextStr.assign((char *) ciphertextBytes);","","\t//Output plaintext/ciphertext for sanity check","\tcout << \"Plaintext: \" << plaintextStr << endl;","\tcout << \"Ciphertext: \" << ciphertextStr << endl;","","\t//Reset plaintext (for sanity again)","\tplaintextStr.assign(\"\");","","\t//Reset Key & IV","\t//!!! THIS IS IMPORTANT: If you do not reset the stream cipher the data will","\t\t//be encrypted again with a different part of the streaming key","\t\t//Resetting the key & IV ensure that the same key is used, and we decrypt","\t/////////////////////////////////////////////////////////////////////////////","\t/////////////////////////////////////////////////////////////////////////////","\tsalsa.SetKeyWithIV(key, 32, iv);","","\t//~Decryption================================================================","\t/////////////////////////////////////////////////////////////////////////////","\t/////////////////////////////////////////////////////////////////////////////","\tsalsa.ProcessData(plaintextBytes, ciphertextBytes, ciphertextStr.length());","\tplaintextStr.assign((char *) plaintextBytes);","","\t//Output newly decrypted plaintext","\tcout << \"Plaintext Again: \" << plaintextStr << endl << endl;","\tcout << endl << \"SALSA!\" << endl << endl << \"     \" << \"...20...\" << endl;","","\tdelete ciphertextBytes;","","\treturn 0;","}",""],"id":59},{"start":{"row":0,"column":0},"end":{"row":65,"column":1},"action":"insert","lines":["#include \"salsa.h\"","using CryptoPP::Salsa20;","","#include \"osrng.h\"","using CryptoPP::AutoSeededRandomPool;","","#include <iostream>","using std::cout;","using std::endl;","","using std::string;","","int main() {","","\tAutoSeededRandomPool prng;","","\tstring ciphertextStr(\"\"), plaintextStr(\"My Plaintext!! My Dear plaintext!!\");","\tbyte *plaintextBytes = (byte *) plaintextStr.c_str();","\t//I could statically allocate this, but then changes will require work, and typing","\tbyte *ciphertextBytes = new byte[plaintextStr.length()];","","\t//~Key and IV Generation/Initialization======================================","\t/////////////////////////////////////////////////////////////////////////////","\t/////////////////////////////////////////////////////////////////////////////","\tbyte key[32];","\tbyte iv[8];","\tprng.GenerateBlock(key, 32);","\tprng.GenerateBlock(iv, 8);","","\t//~Encryption================================================================","\t/////////////////////////////////////////////////////////////////////////////","\t/////////////////////////////////////////////////////////////////////////////","\tSalsa20::Encryption salsa;\t","\tsalsa.SetKeyWithIV(key, 32, iv);","\tsalsa.ProcessData(ciphertextBytes, plaintextBytes, plaintextStr.length());","\tciphertextStr.assign((char *) ciphertextBytes);","","\t//Output plaintext/ciphertext for sanity check","\tcout << \"Plaintext: \" << plaintextStr << endl;","\tcout << \"Ciphertext: \" << ciphertextStr << endl;","","\t//Reset plaintext (for sanity again)","\tplaintextStr.assign(\"\");","","\t//Reset Key & IV","\t//!!! THIS IS IMPORTANT: If you do not reset the stream cipher the data will","\t\t//be encrypted again with a different part of the streaming key","\t\t//Resetting the key & IV ensure that the same key is used, and we decrypt","\t/////////////////////////////////////////////////////////////////////////////","\t/////////////////////////////////////////////////////////////////////////////","\tsalsa.SetKeyWithIV(key, 32, iv);","","\t//~Decryption================================================================","\t/////////////////////////////////////////////////////////////////////////////","\t/////////////////////////////////////////////////////////////////////////////","\tsalsa.ProcessData(plaintextBytes, ciphertextBytes, ciphertextStr.length());","\tplaintextStr.assign((char *) plaintextBytes);","","\t//Output newly decrypted plaintext","\tcout << \"Plaintext Again: \" << plaintextStr << endl << endl;","\tcout << endl << \"SALSA!\" << endl << endl << \"     \" << \"...20...\" << endl;","","\tdelete ciphertextBytes;","","\treturn 0;","}"]}],[{"start":{"row":0,"column":10},"end":{"row":0,"column":11},"action":"insert","lines":["c"],"id":60}],[{"start":{"row":0,"column":11},"end":{"row":0,"column":12},"action":"insert","lines":["r"],"id":61}],[{"start":{"row":0,"column":10},"end":{"row":0,"column":12},"action":"remove","lines":["cr"],"id":62},{"start":{"row":0,"column":10},"end":{"row":0,"column":16},"action":"insert","lines":["crypto"]}],[{"start":{"row":0,"column":16},"end":{"row":0,"column":17},"action":"insert","lines":["+"],"id":63}],[{"start":{"row":0,"column":17},"end":{"row":0,"column":18},"action":"insert","lines":["+"],"id":64}],[{"start":{"row":0,"column":18},"end":{"row":0,"column":19},"action":"insert","lines":["/"],"id":65}],[{"start":{"row":3,"column":10},"end":{"row":3,"column":11},"action":"insert","lines":["c"],"id":66}],[{"start":{"row":3,"column":10},"end":{"row":3,"column":11},"action":"remove","lines":["c"],"id":67},{"start":{"row":3,"column":10},"end":{"row":3,"column":16},"action":"insert","lines":["crypto"]}],[{"start":{"row":3,"column":16},"end":{"row":3,"column":17},"action":"insert","lines":["+"],"id":68}],[{"start":{"row":3,"column":17},"end":{"row":3,"column":18},"action":"insert","lines":["+"],"id":69}],[{"start":{"row":3,"column":18},"end":{"row":3,"column":19},"action":"insert","lines":["/"],"id":70}]]},"ace":{"folds":[],"scrolltop":840,"scrollleft":0,"selection":{"start":{"row":18,"column":55},"end":{"row":18,"column":55},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1479358994385,"hash":"942ea93af4b4dcc3fc73609ac0ce467934585cf8"}